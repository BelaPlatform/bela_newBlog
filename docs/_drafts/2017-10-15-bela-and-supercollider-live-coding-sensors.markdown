---
layout: post
title: "SuperCollider and Bela: live-code your sensors"
date: 2017-10-15
categories:
  - "Tutorials"
  - "Software"
description: "Live-coding the world of hardware"
image: bela-and-supercollider-live-coding-sensors/alo-allik.jpg
author: bela
---
An update on the latest developments for using the infinitely flexible computer music language Supercollider with Bela.

## What is Supercollider?

Supercollider is an open source software environment and dynamic coding language for audio synthesis and algortithmic composition. It was developed by James McCartney in 1996, and since 2002 when it was released with as a free and open software it has blossomed into one of the most popular computer music languages used by musicians, artists and researchers working with sound. The Supercollider software offers a different paradigm for creating electronic music in comparison to code-based options such as C++ or data-flow options such as Pure Data: instead of having to compile your code after every edit Supercollider allows execution of lines of code on-the-fly, without interupting the audio. This opens up a set of new possibilities that revolve around the practice of live-coding: rewritting programmes on-the-fly in an improvised manner to create live sound or visuals.

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/live-code-fest-knotts-allik.jpg" caption="Shelley Knotts and Alo Allik live coding visuals and sounds at the Live Code Festival 2013." %}

There are three main components to Supercollider: `scsynth` is the audio core of the platform which features hundreds of unit generators (UGens) for analysis, synthesis and processing; `sclang` is the interpreted programming language (i.e. instructions can be executed directly) that acts as the algorithmic and sequencing heart of Supercollider that controls scsynth via [Open Sound Control (OSC)](https://en.wikipedia.org/wiki/Open_Sound_Control); `scide` is the glue that binds the above two parts together, an editor for writing and executing sclang.

The whole system has a client/server architecture: the server `scsynth` runs the audio processing and can instantiate, connect and control new audio processing blocks in response to specific OSC messages it receives from a client.
The Supercollider client of choice has been `sclang` (often referred to as "the language" of Supercollider), but the client can be any program capable of formatting messages as OSC.
`SClang`, itself, is an object-oriented programming language that allows the definition of synth voices, the running of patterns, the creation of GUI elements, and the execution of many base units of algorthimic composition.
The benefit of this particular architecture comes from its flexibility: in many cases the server and the client will run on the same machine, however they can easily live on separate machines on the same network, opening up great possibilities for distributed control of multiple synth engines or networked performances.

## Writing code in Supercollider

Typically, users write their code in the Supercollider IDE which allows to send the code line-by-line or block-by-block to the interpreter.
This is the foundation of many live-coding performance practices where artists will improvise with their code blocks, executing blocks at a time and updating parameters and coding structures as they go.
Sclang is just one language that can be used with Supercollider, there other many high-level languages that build on the same logic and interact with the Supercollider server, for instance [Tidal](https://tidalcycles.org/getting_started.html), [ScalaCollider](http://www.sciss.de/scalaCollider/), [Overtone](http://overtone.github.io/) or [ixi lang](http://www.ixi-audio.net/content/software.html).

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/live-coding-sc-ide.jpg" %}

## Supercollider and Bela

Bela allows you to take control the audio generated by Supercollider in realtime by connecting analog and digital sensors to the board. Additionally, the analog and digital outputs allow to interface to CV synthesizers, LED or motors.

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/bela-sensors.jpg" %}

Thanks to the combined efforts of [Marije Balmaan](https://www.marijebaalman.eu/), [Giulio Moro](https://github.com/giuliomoro), [Dan Stowell](http://www.mcld.co.uk/research/), [Till Bovermann](http://tai-studio.org/), [Jonathan Reus](http://jonathanreus.com/) and many others, it is now possible to run SC on Bela and to access all the inputs and outputs from within the Supercollider server, with the low-latency that characterizes the whole Bela environment.
The first major steps towards integrating SuperCollider with Bela happened around the instrument building workshop that we led at [STEIM in August 2016](http://blog.bela.io/2016/12/15/steim/). At this workshop we had five of the eight instruments running on SuperCollider. Since then we have held various [workshops](http://blog.bela.io/category/workshops/) that have focused on using SuperCollider with Bela and a couple of internal hackathons where the support of the language has been pushed forward.

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/la-diantenne.jpg" caption="La Diantenne, a pitched percussion instrument by Dianne Verdonk. This instrument was ported to Bela running SuperCollider during the STEIM workshop." %}


This is achieved with the help of a number of customized `ugens` (unit-generators, the SC term for a plugin) and an audio backend which ties to the Bela API.
SC on Bela brings in a paradigm shift that adds physical interation to the core SC environment, allowing SC users to connect to the real world to make sounds and blink lights.
All of this, alongside generating and processing audio, of course.

This snippet of code shows how to read a digital input and activate a digital output in response:

```supercollider
	SynthDef('buttonControl', {arg inPin, outPin;
		var button = DigitalIn.ar(inPin);
		DigitalOut.ar(outPin, button);
	}).add;	
```

When using SC on Bela you can take advantage of the server/client architecture by running the language and the SC IDE on your computer while running `scsynth` on Bela, so that you can use the live-coding approach for experimenting and trying out things.
However, once you have finalized your project, you may want to run `sclang` on Bela to be able to run your program without live-coding interaction, for instance to make a stand-alone instrument running on battery.

//GIF of blinking LED on Bela

## Bela inputs and the language

In SC, high-level behaviours such as patterns, tasks, routines are typically implemented in the language.
For this reason, controls such as MIDI, serial, network are typicallu handled by the langauge itself.
However, in the case of Bela, the analog and digital inputs are available to the server only, in order to guarantee low-latency and high bandwidth to control sound parameters.
Conveniently, it is still possible to send these controls back to the language using the `SendReply` object.
In the snippet below, the values read from the analog inputs 0 and 1 are sent back to the language 10 times per second:

```supercollider
var a0 = AnalogIn.ar(0);
var a1 = AnalogIn.ar(1);
SendReply.kr(Impulse.kr(10), '/ctrl', [a0, a1]);
```

-  add a video of something slightly more articulated, like example 6-pattern-control with actual sensors and - very important - some LEDs!

## Getting started

If your Bela board is up-to-date then Supercollider will already be installed, however you will want to make sure you are running the [latest release](https://github.com/giuliomoro/supercollider/releases) which is being updated regularly.
To get started with Supercollider on Bela you can go through the examples provided on the board, which can be found in the example browser in the IDE.
These example can be run just like any other Bela project, by simply pressing the "run" button: if there is a `_main.scd` file in your project this will be passed to `sclang` for execution.
Each project also contains a wiring diagram to held you connect sensors or any hardware required: [github.com/giuliomoro/bela-sc-examples](https://github.com/giuliomoro/bela-sc-examples).

- add wiring diagram and code side by side for the above example.

If you want to live-code Bela from the Supercollider IDE, you have to download the [Bela class files](https:/github.com/sensestage/bela-remote) on your computer and follow the instructions in the README file. This way of working allows you to execute code on your machine and directly communicate with scsynth running on the Bela board.
For this to work you need to make sure you are running Supercollider 3.8 or above on your computer.

## Projects made using SuperCollider and Bela

### [Fielding by Till Bovermann](http://tai-studio.org/portfolio/fielding.html)

{% include vimeo.html vimeo="237296449" %}

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/fielding-bovermann-2.jpg" %}

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/fielding-bovermann.jpg" %}


### [The Intimate Earthquake Archive](http://sisselmarietonn.com/The-Intimate-Earthquake-Archive) by [Marije Baalman](https://www.marijebaalman.eu/), [Jonathan Reus-Brodsky](http://jonathanreus.com/) and [Sissel Marie Tonn](http://sisselmarietonn.com/)

{% include vimeo.html vimeo="215224777" %}

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/the-intimate-earthquake.jpg" %}

## What's next?

Porting Supercollider to Bela has involved the efforts of many people and the process of making it fully supported on Bela is still not 100% complete. We recently have announced the Beta version, but we are aiming to release a stable version in the near future. Any feedback we can get from users of Supercollider who are working with Bela would be much appreciated so please get in touch. In the near future you expect the following developments:

### Integrating support for the Bela Scope.

The Bela oscilloscope that can be used via the browser is not currently accessible via Supercollider.
We are hoping to make this possible soon, as it is a very useful tool and offers more advanced features than SC's own `Scope` object.

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/scope-to-be-updated.jpg" %}


### Live coding from within the Bela IDE.

Currently the Bela IDE can be used only to run code non-interactively and we need to resort to the Supercollider IDE running on the host computer to do live-coding.
We are going to add the possibility of executing snippets of code from within the Bela IDE, making it even easier to get started.

{% include single-image.html fileName="bela-and-supercollider-live-coding-sensors/supercollider-execute.gif" %}


### More bug fixes

Supercollider was designed with a desktop environment in mind, and porting it to the constrained environment of an embedded platform requires further work and optimizations.
We hope that some of the improvements we propose will eventualy make their way upstream so that they can be useful to all SC users, not only those that use it on Bela.
Ultimately, we aim to be able to merge the Bela developmnet branch back into the main Supercollider development branch, which would make maintenance easier for us.
You can track the open issues on [github.com/sensestage/supercollider/issues](https://github.com/sensestage/supercollider/issues) and get the latest release of Supercollider for Bela from [github.com/giuliomoro/supercollider/releases](https://github.com/giuliomoro/supercollider/releases).

### Links

For more information about supercollider and some great resources for learning this language have a look at these links:

- [Supercollider](https://supercollider.github.io/)
- [Algorave](https://algorave.com/about/)
- [Live Coding Network](http://iclc.livecodenetwork.org/)
- [Till Bovermann's pointers for using Bela and Supercollider](http://blog.bela.io/2017/09/29/till-bovermann-bela-supercollidor/)



